#+STARTUP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (tool-bar-mode 0)
  (blink-cursor-mode 0)
  (menu-bar-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
  (use-package try
	:ensure t)
#+END_SRC

* which key
  Brings up some help (especially with C-x)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:config
	(which-key-mode 1))
#+END_SRC

* Org mode & Org bullets
#+BEGIN_SRC emacs-lisp
  ;; Org-mode stuff
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (visual-line-mode 1))
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex)))

  (setq org-log-done t)
  (setq org-agenda-files '("~/todo.org"))

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Adding timestamps and other states for tasks in TODO liss
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

  ;; Changed the location to save archived task (C-c C-x C-s) or (C-c $)
  ;; had to run:
  ;; cd ~/.emacs.d/elpa
  ;; find org*/*.elc -print0 | xargs -0 rm
  ;; to fix some errors.
  (setq org-archive-location "~/Documents/TODOs/archive.org::")
  (setq org-startup-folded t)
  (setq org-startup-indented t)
  (setq org-export-latex-hyperref-format "\\ref{%s}")

  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c DEL") 'org-table-blank-field)))

  (define-key org-mode-map (kbd "C-c SPC")
    (lambda () 
      (interactive) (evil-normal-state))) 
#+END_SRC

* Auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)
#+END_SRC
* CDLaTeX
#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t)
#+END_SRC
* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t)

  (define-key evil-ex-map "W" 'save-buffer)

  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (define-key evil-normal-state-map (kbd "C-ç") 'evil-end-of-line)
  (define-key evil-normal-state-map (kbd "C-c '") 'comment-region)
  (define-key evil-normal-state-map (kbd "C-c u") 'uncomment-region)
  (define-key evil-normal-state-map (kbd "C-c b") (kbd "dibi( ) C-c SPC h p")) ;; This line allow surrounding the contents of a parenthesis
  (define-key evil-normal-state-map (kbd "C-c w") (kbd "diwi( ) C-c SPC h p")) ;; This line allow surrounding the contents of a parenthesis
  (global-set-key (kbd "C-c i") 'indent-region)
  (define-key evil-normal-state-map (kbd "g d") 'xref-find-definitions)
  (define-key evil-normal-state-map (kbd "C-c g d") 'xref-find-definitions-other-window)
  (define-key evil-normal-state-map (kbd "C-c y") 'yas-insert-snippet)
  (define-key evil-normal-state-map (kbd "C-e") 'evil-end-of-line)
  (define-key global-map (kbd "C-c SPC")
    (lambda () 
      (interactive) (evil-normal-state))) 
  (evil-mode 1)
#+END_SRC

* Emacs-theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :config
    (load-theme 'monokai t))
  ;; I left this here just in case of regrets
  ;; (use-package spacemacs-theme
  ;;   :defer t
  ;;   :init
  ;;   (load-theme 'spacemacs-dark t)
  ;;   (setq spacemacs-theme-org-agenda-height nil)
  ;;   (setq spacemacs-theme-org-height nil))
  (add-to-list 'default-frame-alist
               '(font . "Monospace-10"))
#+END_SRC

* Ace window
#+BEGIN_SRC emacs-lisp
  ;; This is no longer needed since we installed Swiper
  ;;(setq ido-enable-flex-matching t)
  ;;(setq ido-everywhere t)
  ;;(ido-mode 1)

  (defalias 'list-buffers 'ibuffer)
  ;; (defalias 'list-buffers 'ibuffer-other-window)

  ;; Package to display numbers on each window created by doing C-x [1234]
  (use-package ace-window
	:ensure t
	:init
	(progn
	  (global-set-key [remap other-window] 'ace-window)
	  (custom-set-faces
	   '(aw-leading-char-face
		 ((t (:inherit ace-jump-face-foreground :height 2.0)))))
	  ))
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp
  ;; Used for enchanced searching (Swiper) and counsel is a dependency of Swiper.
  (use-package counsel
	:ensure t
	)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
	:ensure t
	:diminish (ivy-mode)
	:bind ("C-x b" . ivy-switch-buffer)
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)))
#+END_SRC

* Swiper
#+BEGIN_SRC emacs-lisp
  ;; Making searches easier
  (use-package swiper
	:ensure try
	:bind (("C-s" . swiper)
		   ("C-r" . swiper)
		   ("C-c C-r" . ivy-resume)
		   ("M-x" . counsel-M-x)
		   ("C-x C-f" . counsel-find-file))
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	)
#+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
  ;; Useed to show specific characters on screen, which one with its own id letter, allowing fast navigation
  (use-package avy
	:ensure t
	:bind ("M-s" . avy-goto-char))
#+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
    ;;Installing company-mode for use with eglot
    (add-to-list 'load-path "~/.emacs.d/company/")
    (use-package company
      :ensure t
      :config 
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
      (setq company-begin-commands '(self-insert-command))
      :init
      (add-hook 'after-init-hook 'global-company-mode))

    (add-to-list 'company-backends 'company-web-html)
    (add-to-list 'company-backends 'company-web-jade)
    (add-to-list 'company-backends 'company-web-slim)
  #+END_SRC
  
* Line numbering
  #+BEGIN_SRC emacs-lisp
;; Configuring the relative numbering that's so useful for evil-mode
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)

;; Remaping the sequence C-c SPC to act as ESC to exit vim input mode and go back to normal mode
(global-set-key (kbd "C-c SPC")
		(lambda ()
		(interactive) (evil-normal-state)))
#+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)

  #+END_SRC

* Web mode
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/web-mode/")
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-quoting t)
  (setq web-mode-auto-close-style 2)

  (define-key web-mode-map (kbd "C-c C-'") 'company-web-html)
  (add-hook 'web-mode-hook (lambda ()
                             (set (make-local-variable 'company-backends) '(company-web-html company-files))
                             (company-mode t)))

  ;; (defun my-web-mode-hook ()
  ;;   "Hook for `web-mode'."
  ;;   (set (make-local-variable 'company-backends)
  ;;        '(
  ;;          ;; company-css
  ;;          ;; company-dabbrev
  ;;          company-dabbrev-code
  ;;          ;; company-files
  ;;          company-yasnippet
  ;;          company-web-html))
  ;;   (company-quickhelp-mode 0))

  ;; (add-hook 'web-mode-hook 'my-web-mode-hook)
  ;; (add-hook 'web-mode-hook 'company-mode)
#+end_src

* Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
	:ensure t
	:init
	(elpy-enable)
	(define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
	)
#+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
        :ensure t
        :defer 3.7
        :hook ((lisp-interaction-mode . (lambda () (yas-minor-mode)))
            (emacs-lisp-mode . (lambda () (yas-minor-mode)))
            (org-mode . (lambda () (yas-minor-mode)))
            (c++-mode . (lambda () (yas-minor-mode)))
            (c-mode . (lambda () (yas-minor-mode)))
            (arduino-mode . (lambda () (yas-minor-mode)))
            ;; (web-mode . (lambda () (yas-minor-mode)))
            (python-mode . (lambda () (yas-minor-mode)))))

    (use-package yasnippet-snippets
        :ensure t
        :after yasnippet
        :config (yas-reload-all))
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit
	:ensure t
	:bind ("C-x g" . 'magit-status))
  #+END_SRC
* Doom-modeline
#+BEGIN_SRC emacs-lisp
  ;;Installing a few depndencies
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
* PDF tools
  #+BEGIN_SRC emacs-lisp
(use-package pdf-tools
	:ensure t
	:config
	(pdf-tools-install))
  #+END_SRC
* w3m
#+begin_src emacs-lisp
  (use-package w3m
    :ensure t)
  ;;basic setup from w3m page
  (setq w3m-coding-system 'utf-8
        w3m-file-coding-system 'utf-8
        w3m-file-name-coding-system 'utf-8
        w3m-input-coding-system 'utf-8
        w3m-output-coding-system 'utf-8
        w3m-terminal-coding-system 'utf-8)

  (setq browse-url-browser-function 'w3m-browse-url)
  ;;(setq w3m-default-coding-system 'utf-8)
  (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
  ;; optional keyboard short-cut
  (global-set-key "\C-xm" 'browse-url-at-point)

  ;; Configuring default browser
  (setq browse-url-browser-function 'browse-url-generic)
  (setq browse-url-generic-program "firefox")
#+end_src
# * Mu4e
# #+BEGIN_SRC emacs-lisp
#   (use-package org-mime
#     :ensure t)

#   (setq org-mime-library 'mml)

#   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

#   (require 'mu4e)

#   (setq mu4e-maildir (expand-file-name "~/Maildir"))

#   ; get mail
#   (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/.mbsyncrc -a"
#         ;;mu4e-html2text-command "w3m -dump -I utf-8 -O utf-8 -T text/html"
#         mu4e-view-prefer-html t
#         mu4e-update-interval 120
#         mu4e-headers-auto-update t
#         mu4e-compose-signature-auto-include nil
#         mu4e-use-fancy-chars t
#         mu4e-compose-format-flowed t)

#   ;; set UTF-8 as default encoding
#   (prefer-coding-system 'utf-8)
#   (set-default-coding-systems 'utf-8)
#   (set-terminal-coding-system 'utf-8)
#   (set-keyboard-coding-system 'utf-8)

#   ;; Enable images in w3m
#   ;; currently not used
#   (setq w3m-default-display-inline-images t)
#   ;;(defun mu4e-action-view-in-w3m ()
#   (defun mu4e-action-view-in-w3m (msg)
#     "View the body of the message in emacs w3m."
#     (interactive)
#     (w3m-browse-url (concat "file://"
#                 (mu4e~write-body-to-html msg))))
#                 ;;(mu4e~write-body-to-html (mu4e-message-at-point t)))))

#   ;; allows me to open the message in the browser
#   ;; which in turn lets me see inline images
#   (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

#   ;; for rich-text to be more readable in dark-themed emacs
#   (setq shr-color-visible-luminance-min 80)


#   ;; <tab> to navigate to links, <RET> to open them in browser
#   (add-hook 'mu4e-view-mode-hook
#     (lambda()
#   ;; try to emulate some of the eww key-bindings
#   (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
#   (local-set-key (kbd "<tab>") 'shr-next-link)
#   (local-set-key (kbd "<backtab>") 'shr-previous-link)))

#   ;; Speeding up email retrieval and update
#   (setq
#     mu4e-index-cleanup nil      ;; don't do a full cleanup check
#     mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs

#   ;; enable inline images
#   ;; This only works when w3m is not activated
#   (setq mu4e-view-show-images t)

#   ;; use imagemagick, if available
#   (when (fboundp 'imagemagick-register-types)
#     (imagemagick-register-types))

#   ;; general emacs mail settings; used when composing e-mail
#   ;; the non-mu4e-* stuff is inherited from emacs/message-mode
#   ;;(setq mu4e-reply-to-address "emanoel.desousacosta@gmail.com"
#   ;;    user-mail-address "emanoel.desousacosta@gmail.com"
#   ;;    user-full-name  "Emanoel de Sousa Costa")

#   ;; don't save message to Sent Messages, IMAP takes care of this
#   ; (setq mu4e-sent-messages-behavior 'delete)

#   ;; spell check
#   ;;(add-hook 'mu4e-compose-mode-hook
#   ;;        (defun my-do-compose-stuff ()
#   ;;           "My settings for message composition."
#   ;;           (set-fill-column 72)
#   ;;           (flyspell-mode)))

#   ;; spell check
#   (add-hook 'mu4e-compose-mode-hook
#       (defun my-do-compose-stuff ()
#          "My settings for message composition."
#          (visual-line-mode 1)
#          (org-mu4e-compose-org-mode)
#              (use-hard-newlines -1)
#          (set-fill-column 72)
#          (flyspell-mode)))


#   (require 'smtpmail)
#   ;;from the info manual
#   (setq mu4e-attachment-dir  "~/Downloads")

#   ;;from vxlabs config
#   ;; show full addresses in view message (instead of just names)
#   ;; toggle per name with M-RET
#   (setq mu4e-view-show-addresses 't)

#   ;; don't ask when quitting
#   (setq mu4e-confirm-quit nil)
#   ;; mu4e-context
#   (setq mu4e-context-policy 'pick-first)
#   (setq mu4e-compose-context-policy 'always-ask)
#   (setq mu4e-contexts
#     (list
#      (make-mu4e-context
#       :name "college" ;;for acc1-gmail
#       :enter-func (lambda () (mu4e-message "Entering context college"))
#       :leave-func (lambda () (mu4e-message "Leaving context college"))
#       :match-func (lambda (msg)
#             (when msg
#           (mu4e-message-contact-field-matches
#            msg '(:from :to :cc :bcc) "emanoel.desousacosta@gmail.com")))
#       :vars '((user-mail-address . "emanoel.desousacosta@gmail.com")
#           (user-full-name . "Emanoel de Sousa Costa")
#           (mu4e-sent-folder . "/acc1-gmail/[acc1].Sent Mail")
#           (mu4e-drafts-folder . "/acc1-gmail/[acc1].Drafts")
#           (mu4e-trash-folder . "/acc1-gmail/[acc1].Trash")
#           (message-signature-file . "~/.emacs.d/.signature") ; put your signature in this file
#           (mu4e-compose-format-flowed . t)
#           (smtpmail-queue-dir . "~/Maildir/acc1-gmail/queue/cur")
#           (message-send-mail-function . smtpmail-send-it)
#           (smtpmail-smtp-user . "emanoel.desousacosta@gmail.com")
#           ;; These two lines are no longer used, and onde must keep the .authinfo.gpg file with the cred for all accs in their ~/ dir
#           ;;(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
#           ;;(smtpmail-auth-credentials . (expand-file-name "~/.emacs.d/.authinfo.gpg"))
#           (smtpmail-default-smtp-server . "smtp.gmail.com")
#           (smtpmail-smtp-server . "smtp.gmail.com")
#           (smtpmail-smtp-service . 587)
#           (smtpmail-debug-info . t)
#           ;;(smtpmail-debug-verbose . t)
#           (mu4e-maildir-shortcuts . ( ("/acc1-gmail/[acc1].Inbox"            . ?i)
#                       ("/acc1-gmail/[acc1].Sent Mail" . ?s)
#                       ("/acc1-gmail/[acc1].Trash"       . ?t)
#                       ("/acc1-gmail/[acc1].All Mail"  . ?a)
#                       ("/acc1-gmail/[acc1].Starred"   . ?r)
#                       ("/acc1-gmail/[acc1].Drafts"    . ?d)
#                       ))))
#      (make-mu4e-context
#       :name "vic23" ;;for acc1-gmail
#       :enter-func (lambda () (mu4e-message "Entering context vic23"))
#       :leave-func (lambda () (mu4e-message "Leaving context vic23"))
#       :match-func (lambda (msg)
#             (when msg
#           (mu4e-message-contact-field-matches
#            msg '(:from :to :cc :bcc) "victoremanoel23@gmail.com")))
#       :vars '((user-mail-address . "victoremanoel23@gmail.com")
#           (user-full-name . "Emanoel de Sousa Costa")
#           (mu4e-sent-folder . "/acc2-gmail/[acc2].Sent Mail")
#           (mu4e-drafts-folder . "/acc2-gmail/[acc2].Drafts")
#           (mu4e-trash-folder . "/acc2-gmail/[acc2].Trash")
#           (message-signature-file . "~/.emacs.d/.signature") ; put your signature in this file
#           (mu4e-compose-format-flowed . t)
#           (smtpmail-queue-dir . "~/Maildir/acc2-gmail/queue/cur")
#           (message-send-mail-function . smtpmail-send-it)
#           (smtpmail-smtp-user . "victoremanoel23@gmail.com")
#           ;; These two lines are no longer used, and onde must keep the .authinfo.gpg file with the cred for all accs in their ~/ dir
#           ;;(smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
#           ;;(smtpmail-auth-credentials . (expand-file-name "~/.emacs.d/.authinfo_2.gpg"))
#           (smtpmail-default-smtp-server . "smtp.gmail.com")
#           (smtpmail-smtp-server . "smtp.gmail.com")
#           (smtpmail-smtp-service . 587)
#           (smtpmail-debug-info . t)
#           ;;(smtpmail-debug-verbose . t)
#           (mu4e-maildir-shortcuts . ( ("/acc2-gmail/[acc2].Inbox"            . ?i)
#                       ("/acc2-gmail/[acc2].Sent Mail" . ?s)
#                       ("/acc2-gmail/[acc2].Trash"       . ?t)
#                       ("/acc2-gmail/[acc2].All Mail"  . ?a)
#                       ("/acc2-gmail/[acc2].Starred"   . ?r)
#                       ("/acc2-gmail/[acc2].Drafts"    . ?d)
#                       ))))))


#   (require 'org-mu4e)

#   ;; convert org mode to HTML automatically
#   (setq org-mu4e-convert-to-html t)

#   (setq mu4e-change-filenames-when-moving t)
#   (setq mu4e-headers-skip-duplicates nil) ;; this line is needed for drafts to show properly
#   (mu4e t)
# #+END_SRC

# * Mu4e-alert
# #+BEGIN_SRC emacs-lisp
#   ;; Configure desktop notifs for incoming emails:
#   (use-package mu4e-alert
#     :ensure t
#     :init
#     (defun perso--mu4e-notif ()
#       "Display both mode line and desktop alerts for incoming new emails."
#       (interactive)
#       (mu4e-update-mail-and-index 1)        ; getting new emails is ran in the background
#       (mu4e-alert-enable-mode-line-display) ; display new emails in mode-line
#       (mu4e-alert-enable-notifications))    ; enable desktop notifications for new emails
#     (defun perso--mu4e-refresh ()
#       "Refresh emails every 120 seconds and display desktop alerts."
#       (interactive)
#       (mu4e t)                            ; start silently mu4e (mandatory for mu>=1.3.8)
#       (run-with-timer 0 120 'perso--mu4e-notif))
#     :after mu4e
#     :bind ("<f2>" . perso--mu4e-refresh)  ; F2 turns Emacs into a mail client
#     :config
#     ;; Mode line alerts:
#     (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
#     ;; Desktop alerts:
#     (mu4e-alert-set-default-style 'libnotify)
#     (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
#     ;; Only notify for "interesting" (non-trashed) new emails:
#     (setq mu4e-alert-interesting-mail-query
#           (concat
#            ;;"flag:unread maildir:/acc1-gmail/[acc1].Inbox"
#            "flag:unread and maildir:/Inbox/"
#            " AND NOT flag:trashed")))
# #+END_SRC

* SLIME
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/Downloads/Programs/SLIME/slime/")
  (require 'slime)
  (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
  (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
  ;;(require 'slime-autoloads)
  ;; Setting the location for my CL compiler
  (setq inferior-lisp-program "/usr/bin/sbcl")
#+END_SRC
* Eglot
#+begin_src emacs-lisp
  (use-package eglot :ensure t)
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-11"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src
* Arduino mode
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/vendor/arduino-mode")
  (setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
  (autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
#+end_src

* C style tweaks
# #+begin_src emacs-lisp
#   (defun c-lineup-arglist-tabs-only (ignored)
#     "Line up argument lists by tabs, not spaces"
#     (let* ((anchor (c-langelem-pos c-syntactic-element))
#            (column (c-langelem-2nd-pos c-syntactic-element))
#            (offset (- (1+ column) anchor))
#            (steps (floor offset c-basic-offset)))
#       (* (max steps 1)
#          c-basic-offset)))

#   (add-hook 'c-mode-common-hook
#             (lambda ()
#               ;; Add kernel style
#               (c-add-style
#                "linux-tabs-only"
#                '("linux" (c-offsets-alist
#                           (arglist-cont-nonempty
#                            c-lineup-gcc-asm-reg
#                            c-lineup-arglist-tabs-only))))))

#   (add-hook 'c-mode-hook
#             (lambda ()
#               (let ((filename (buffer-file-name)))
#                 ;; Enable kernel mode for the appropriate files
#                 (when (and filename
#                            (string-match (expand-file-name "~/src/linux-trees")
#                                          filename))
#                   (setq indent-tabs-mode t)
#                   (setq show-trailing-whitespace t)
#                   (c-set-style "linux-tabs-only")))))
# #+end_src
                
