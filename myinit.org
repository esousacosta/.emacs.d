#+STARTIP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (tool-bar-mode 0)
  (blink-cursor-mode 0)
  (menu-bar-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
#+END_SRC

* which key
  Brings up some help (especially with C-x)
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(which-key-mode 1))
#+END_SRC

* Org mode & Org bullets
#+BEGIN_SRC emacs-lisp
  ;; Org-mode stuff
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org
  :ensure t)
#+END_SRC

* Other packages
#+BEGIN_SRC emacs-lisp

  (setq evil-want-C-i-jump nil)
  (use-package evil
  :ensure t)

  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (evil-mode 1)


  (use-package gruvbox-theme
  :ensure t)
  (load-theme 'gruvbox)

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; This is no longer needed since we installed Swiper
  ;;(setq ido-enable-flex-matching t)
  ;;(setq ido-everywhere t)
  ;;(ido-mode 1)

  (defalias 'list-buffers 'ibuffer)
  ;; (defalias 'list-buffers 'ibuffer-other-window)

  ;; Package to display numbers on each window created by doing C-x [1234]
  (use-package ace-window
  :ensure t
  :init
  (progn
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
	  '(aw-leading-char-face
	  ((t (:inherit ace-jump-face-foreground :height 2.0)))))
  ))


  ;; Used for enchanced searching (Swiper) and counsel is a dependency of Swiper.

  (use-package counsel
  :ensure t
  )

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind ("C-x b" . ivy-switch-buffer)
  :config
  (progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)))

  (use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	  ("C-r" . swiper)
	  ("C-c C-r" . ivy-resume)
	  ("M-x" . counsel-M-x)
	  ("C-x C-f" . counsel-find-file))
  :config
  (progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))

  ;; Useed to show specific characters on screen, which one with its own id letter, allowing fast navigation
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))

#+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
  ;;Installing company-mode for use with rtags
  (use-package company
	:ensure t
	:init
	(add-hook 'after-init-hook 'global-company-mode))
  #+END_SRC

* Auto-complete 
  #+BEGIN_SRC emacs-lisp
  ;;(use-package auto-complete
  ;;  :ensure t
  ;;  :init
  ;;  (progn
  ;;	(ac-config-default)
  ;;	(global-auto-complete-mode t)
  ;;	(setq ac-mode (delq 'python-mode ac-modes))
  ;;	))

  ;; Configuring the relative numbering that's so useful for evil-mode
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)

  ;; Remaping the sequence C-c SPC to act as ESC to exit vim input mode and go back to normal mode
  (global-set-key (kbd "C-c SPC")
		  (lambda ()
			(interactive) (evil-normal-state)))
#+END_SRC

* Rtags
  #+BEGIN_SRC emacs-lisp 
	;; ensure that we use only rtags checking
	;; https://github.com/Andersbakken/rtags#optional-1
	(use-package flycheck-rtags
	  :ensure t)

	(use-package company-rtags
	  :ensure t)

	(use-package rtags
	  :ensure t
	  :hook (c++-mode . rtags-start-process-unless-running)
	  :config(setq rtags-path "~/.emacs.d/rtags/bin/"))

	(defun setup-flycheck-rtags ()
	  (interactive)
	  (flycheck-select-checker 'rtags)
	  ;; RTags creates more accurate overlays.
	  (setq-local flycheck-highlighting-mode nil)
	  (setq-local flycheck-check-syntax-automatically nil))

	;; only run this if rtags is installed
	(when (require 'rtags nil :noerror)
	  ;; make sure you have company-mode installed
	  (require 'company)
	  (define-key c-mode-base-map (kbd "M-.")
		(function rtags-find-symbol-at-point))
	  (define-key evil-normal-state-map (kbd "M-.")
		(function rtags-find-symbol-at-point))
	  (define-key c-mode-base-map (kbd "M-,")
		(function rtags-find-references-at-point))
	  (define-key evil-normal-state-map (kbd "M-,")
		(function rtags-find-references-at-point))
	  ;; disable prelude's use of C-c r, as this is the rtags keyboard prefix
	  ;;(define-key prelude-mode-map (kbd "C-c r") nil)
	  ;; install standard rtags keybindings. Do M-. on the symbol below to
	  ;; jump to definition and see the keybindings.
	  (rtags-enable-standard-keybindings)
	  ;; comment this out if you don't have or don't use helm
	  (setq rtags-use-helm t)
	  ;; company completion setup
	  (setq rtags-autostart-diagnostics t)
	  (rtags-diagnostics)
	  (setq rtags-completions-enabled t)
	  (push 'company-rtags company-backends)
	  (global-company-mode)
	  (define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
	  (define-key evil-normal-state-map (kbd "<C-tab>") (function company-complete))
	  ;; use rtags flycheck mode -- clang warnings shown inline
	  (require 'flycheck-rtags)
	  ;; c-mode-common-hook is also called by c++-mode
	  (add-hook 'c-mode-common-hook #'setup-flycheck-rtags))
  #+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)

  #+END_SRC
  
* Elpy
#+BEGIN_SRC emacs-lisp
	(use-package elpy
	  :ensure t
	  :init
	  (elpy-enable)
	  (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
	  )
#+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
		(use-package yasnippet
		  :ensure t
		  :defer 3.7
		  :hook ((lisp-interaction-mode . (lambda () (yas-minor-mode)))
			 (emacs-lisp-mode . (lambda () (yas-minor-mode)))
			 (org-mode . (lambda () (yas-minor-mode)))
			 (c++-mode . (lambda () (yas-minor-mode)))
			 (c-mode . (lambda () (yas-minor-mode)))
			 (python-mode . (lambda () (yas-minor-mode)))))

		(use-package yasnippet-snippets
		  :ensure t
		  :after yasnippet
		  :config (yas-reload-all))
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
		(use-package magit
		  :ensure t
		  :bind ("C-x g" . 'magit-status))
  #+END_SRC

* Powerline
  #+BEGIN_SRC emacs-lisp
		(use-package powerline
		  :ensure t
		  :config
		  (powerline-center-evil-theme))
  #+END_SRC

  #+RESULTS:
  : Loaded /home/bacamartes/.emacs.d/myinit.el
