#+STARTUP: overview
* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (tool-bar-mode 0)
  (blink-cursor-mode 0)
  (menu-bar-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
  (use-package try
	:ensure t)
#+END_SRC

* which key
  Brings up some help (especially with C-x)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:config
	(which-key-mode 1))
#+END_SRC

* Org mode & Org bullets
#+BEGIN_SRC emacs-lisp
  ;; Org-mode stuff
  (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org
	:ensure t)

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Adding timestamps and other states for tasks in TODO liss
  (setq org-todo-keywords
		'((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

  ;; Changed the location to save archived task (C-c C-x C-s) or (C-c $)
  ;; had to run:
  ;; cd ~/.emacs.d/elpa
  ;; find org*/*.elc -print0 | xargs -0 rm
  ;; to fix some errors.
  (setq org-archive-location "~/Documents/TODOs/archive.org::")
  (setq org-startup-folded t)
  (setq org-startup-indented t)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t)

  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (define-key evil-normal-state-map (kbd "C-รง") 'evil-end-of-line)
  (define-key evil-normal-state-map (kbd "C-c b") (kbd "dibi( ) C-c SPC h p")) ;; This line allow surrounding the contents of a parenthesis
  (define-key evil-normal-state-map (kbd "C-c w") (kbd "diwi( ) C-c SPC h p")) ;; This line allow surrounding the contents of a parenthesis
  (global-set-key (kbd "C-c i") 'indent-region)
  (evil-mode 1)
#+END_SRC

#+RESULTS:
: t

* Gruvbox
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
	:ensure t)
  (load-theme 'gruvbox)
#+END_SRC
* Ace window
#+BEGIN_SRC emacs-lisp
  ;; This is no longer needed since we installed Swiper
  ;;(setq ido-enable-flex-matching t)
  ;;(setq ido-everywhere t)
  ;;(ido-mode 1)

  (defalias 'list-buffers 'ibuffer)
  ;; (defalias 'list-buffers 'ibuffer-other-window)

  ;; Package to display numbers on each window created by doing C-x [1234]
  (use-package ace-window
	:ensure t
	:init
	(progn
	  (global-set-key [remap other-window] 'ace-window)
	  (custom-set-faces
	   '(aw-leading-char-face
		 ((t (:inherit ace-jump-face-foreground :height 2.0)))))
	  ))
#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
  ;; Used for enchanced searching (Swiper) and counsel is a dependency of Swiper.
  (use-package counsel
	:ensure t
	)
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
	:ensure t
	:diminish (ivy-mode)
	:bind ("C-x b" . ivy-switch-buffer)
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  ;; Making searches easier
  (use-package swiper
	:ensure try
	:bind (("C-s" . swiper)
		   ("C-r" . swiper)
		   ("C-c C-r" . ivy-resume)
		   ("M-x" . counsel-M-x)
		   ("C-x C-f" . counsel-find-file))
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  ;; Useed to show specific characters on screen, which one with its own id letter, allowing fast navigation
  (use-package avy
	:ensure t
	:bind ("M-s" . avy-goto-char))
#+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
;;Installing company-mode for use with rtags
(use-package company
	:ensure t
	:init
(add-hook 'after-init-hook 'global-company-mode))
  #+END_SRC

* Auto-complete 
  #+BEGIN_SRC emacs-lisp
;;(use-package auto-complete
;;  :ensure t
;;  :init
;;  (progn
;;	(ac-config-default)
;;	(global-auto-complete-mode t)
;;	(setq ac-mode (delq 'python-mode ac-modes))
;;	))

;; Configuring the relative numbering that's so useful for evil-mode
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)

;; Remaping the sequence C-c SPC to act as ESC to exit vim input mode and go back to normal mode
(global-set-key (kbd "C-c SPC")
		(lambda ()
		(interactive) (evil-normal-state)))
#+END_SRC

* Rtags
  #+BEGIN_SRC emacs-lisp 
;; ensure that we use only rtags checking
;; https://github.com/Andersbakken/rtags#optional-1
(use-package flycheck-rtags
	:ensure t)

(use-package company-rtags
	:ensure t)

(use-package rtags
	:ensure t
	:hook (c++-mode . rtags-start-process-unless-running)
	:config(setq rtags-path "~/.emacs.d/rtags/bin/"))

(defun setup-flycheck-rtags ()
	(interactive)
	(flycheck-select-checker 'rtags)
	;; RTags creates more accurate overlays.
	(setq-local flycheck-highlighting-mode nil)
	(setq-local flycheck-check-syntax-automatically nil))

;; only run this if rtags is installed
(when (require 'rtags nil :noerror)
	;; make sure you have company-mode installed
	(require 'company)
	(define-key c-mode-base-map (kbd "M-.")
	(function rtags-find-symbol-at-point))
	(define-key evil-normal-state-map (kbd "M-.")
	(function rtags-find-symbol-at-point))
	(define-key c-mode-base-map (kbd "M-,")
	(function rtags-find-references-at-point))
	(define-key evil-normal-state-map (kbd "M-,")
	(function rtags-find-references-at-point))
	;; disable prelude's use of C-c r, as this is the rtags keyboard prefix
	;;(define-key prelude-mode-map (kbd "C-c r") nil)
	;; install standard rtags keybindings. Do M-. on the symbol below to
	;; jump to definition and see the keybindings.
	(rtags-enable-standard-keybindings)
	;; comment this out if you don't have or don't use helm
	(setq rtags-use-helm t)
	;; company completion setup
	(setq rtags-autostart-diagnostics t)
	(rtags-diagnostics)
	(setq rtags-completions-enabled t)
	(push 'company-rtags company-backends)
	(global-company-mode)
	(define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
	(define-key evil-normal-state-map (kbd "<C-tab>") (function company-complete))
	;; use rtags flycheck mode -- clang warnings shown inline
	(require 'flycheck-rtags)
	;; c-mode-common-hook is also called by c++-mode
	(add-hook 'c-mode-common-hook #'setup-flycheck-rtags))
  #+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)

  #+END_SRC
  
* Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
	:ensure t
	:init
	(elpy-enable)
	(define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
	)
#+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
(use-package yasnippet
	:ensure t
	:defer 3.7
	:hook ((lisp-interaction-mode . (lambda () (yas-minor-mode)))
		(emacs-lisp-mode . (lambda () (yas-minor-mode)))
		(org-mode . (lambda () (yas-minor-mode)))
		(c++-mode . (lambda () (yas-minor-mode)))
		(c-mode . (lambda () (yas-minor-mode)))
		(python-mode . (lambda () (yas-minor-mode)))))

(use-package yasnippet-snippets
	:ensure t
	:after yasnippet
	:config (yas-reload-all))
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
(use-package magit
	:ensure t
	:bind ("C-x g" . 'magit-status))
  #+END_SRC

* Doom-modeline
#+BEGIN_SRC emacs-lisp
  ;;Installing a few depndencies
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
* PDF tools
  #+BEGIN_SRC emacs-lisp
(use-package pdf-tools
	:ensure t
	:config
	(pdf-tools-install))
  #+END_SRC

* Mu4e
#+BEGIN_SRC emacs-lisp
  ;;(require 'org-mime)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  ;;(require 'smtpmail)

  ; smtp
  ;;(setq message-send-mail-function 'smtpmail-send-it
  ;;      smtpmail-starttls-credentials
  ;;      '(("smtp.gmail.com" 587 nil nil))
  ;;      smtpmail-default-smtp-server "smtp.gmail.com"
  ;;      smtpmail-smtp-server "smtp.gmail.com"
  ;;      smtpmail-smtp-service 587
  ;;      smtpmail-debug-info t)

  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/Maildir"))

  ;;(setq mu4e-sent-folder   "/acc1-gmail/[acc1].Sent Mail")
  ;;(setq mu4e-drafts-folder "/acc1-gmail/[acc1].Drafts")
  ;;(setq mu4e-trash-folder  "/acc1-gmail/[acc1].Trash")
  ;;(setq message-signature-file "~/.emacs.d/.signature") ; put your signature in this file

  ; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/.mbsyncrc -a"
        mu4e-html2text-command "w3m -T text/html"
        mu4e-update-interval 120
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include nil)

  ;; set UTF-8 as default encoding
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; <tab> to navigate to links, <RET> to open them in browser
  (add-hook 'mu4e-view-mode-hook
    (lambda()
  ;; try to emulate some of the eww key-bindings
  (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
  (local-set-key (kbd "<tab>") 'shr-next-link)
  (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;;(setq mu4e-maildir-shortcuts
  ;;      '( ("/acc1-gmail/[acc1].Inbox"               . ?i)
  ;;         ("/acc1-gmail/[acc1].Sent Mail"   . ?s)
  ;;         ("/acc1-gmail/[acc1].Trash"       . ?t)
  ;;         ("/acc1-gmail/[acc1].All Mail"    . ?a)
  ;;         ("/acc1-gmail/[acc1].Starred"	   . ?r)
  ;;         ("/acc1-gmail/[acc1].Drafts"	   . ?d)))

  ;; enable inline images
  ;; This only works when w3m is not activated
  (setq mu4e-view-show-images t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  ;;(setq mu4e-reply-to-address "emanoel.desousacosta@gmail.com"
  ;;    user-mail-address "emanoel.desousacosta@gmail.com"
  ;;    user-full-name  "Emanoel de Sousa Costa")

  ;; don't save message to Sent Messages, IMAP takes care of this
  ; (setq mu4e-sent-messages-behavior 'delete)

  ;; spell check
  ;;(add-hook 'mu4e-compose-mode-hook
  ;;        (defun my-do-compose-stuff ()
  ;;           "My settings for message composition."
  ;;           (set-fill-column 72)
  ;;           (flyspell-mode)))

  ;; spell check
  (add-hook 'mu4e-compose-mode-hook
      (defun my-do-compose-stuff ()
         "My settings for message composition."
         (visual-line-mode)
         (org-mu4e-compose-org-mode)
             (use-hard-newlines -1)
         (flyspell-mode)))


  (require 'smtpmail)
  ;;from the info manual
  (setq mu4e-attachment-dir  "~/Downloads")

  ;;from vxlabs config
  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses 't)

  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)
  ;; mu4e-context
  (setq mu4e-context-policy 'pick-first)
  (setq mu4e-compose-context-policy 'always-ask)
  (setq mu4e-contexts
    (list
     (make-mu4e-context
      :name "college" ;;for acc1-gmail
      :enter-func (lambda () (mu4e-message "Entering context college"))
      :leave-func (lambda () (mu4e-message "Leaving context college"))
      :match-func (lambda (msg)
            (when msg
          (mu4e-message-contact-field-matches
           msg '(:from :to :cc :bcc) "emanoel.desousacosta@gmail.com")))
      :vars '((user-mail-address . "emanoel.desousacosta@gmail.com")
          (user-full-name . "Emanoel de Sousa Costa")
          (mu4e-sent-folder . "/acc1-gmail/[acc1].Sent Mail")
          (mu4e-drafts-folder . "/acc1-gmail/[acc1].Drafts")
          (mu4e-trash-folder . "/acc1-gmail/[acc1].Trash")
          (message-signature-file . "~/.emacs.d/.signature") ; put your signature in this file
          (mu4e-compose-format-flowed . t)
          (smtpmail-queue-dir . "~/Maildir/acc1-gmail/queue/cur")
          (message-send-mail-function . smtpmail-send-it)
          (smtpmail-smtp-user . "emanoel.desousacosta@gmail.com")
          (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
          (smtpmail-auth-credentials . (expand-file-name "~/.emacs.d/.authinfo.gpg"))
          (smtpmail-default-smtp-server . "smtp.gmail.com")
          (smtpmail-smtp-server . "smtp.gmail.com")
          (smtpmail-smtp-service . 587)
          (smtpmail-debug-info . t)
          ;;(smtpmail-debug-verbose . t)
          (mu4e-maildir-shortcuts . ( ("/acc1-gmail/[acc1].Inbox"            . ?i)
                      ("/acc1-gmail/[acc1].Sent Mail" . ?s)
                      ("/acc1-gmail/[acc1].Trash"       . ?t)
                      ("/acc1-gmail/[acc1].All Mail"  . ?a)
                      ("/acc1-gmail/[acc1].Starred"   . ?r)
                      ("/acc1-gmail/[acc1].Drafts"    . ?d)
                      ))))))

  (require 'org-mu4e)

  ;; convert org mode to HTML automatically
  (setq org-mu4e-convert-to-html t)

  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-headers-skip-duplicates nil) ;; this line is needed for drafts to show properly
  (mu4e t)
#+END_SRC
